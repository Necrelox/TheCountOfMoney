//
// Created by ruby on 04/11/22.
//

#ifndef ECHFOLD_FILE_HPP
#define ECHFOLD_FILE_HPP

#include <filesystem>
#include <fstream>

class File {
private:
    std::fstream _file;
    std::filesystem::path _path;
    std::string _name;
    std::string _extension;
    size_t _size{0};
    size_t _cursorPosition{0};


public:
    ////////////////////////////////////////////////////////////
    ///
    /// \brief Construct a new File object
    ///
    ////////////////////////////////////////////////////////////
    File() = default;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Construct a new File object
    /// \param path The path of the file
    ///
    ////////////////////////////////////////////////////////////
    explicit File(std::filesystem::path &&path);

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Construct a new File object by copy
    /// \param file
    ///
    ////////////////////////////////////////////////////////////
    File(const File &file);

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Construct a new File object by move
    ///
    ////////////////////////////////////////////////////////////
    File(File &&file) noexcept = default;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Operator = by move
    ///
    ////////////////////////////////////////////////////////////
    File &operator=(File &&file) noexcept = default;


    ////////////////////////////////////////////////////////////
    ///
    /// \brief Destroy the File object
    ///
    ////////////////////////////////////////////////////////////
    ~File();

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Path object
    /// \return The path of the file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const std::filesystem::path& getPath() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Name object
    /// \return The name of the file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const std::string& getName() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Extension object
    /// \return The extension of the file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const std::string& getExtension() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Content object
    /// \param cursorPosition The position of the cursor
    /// \param size The size of the buffer
    /// \return The buffer of the file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] std::unique_ptr<char[]> getContentByPosAndSize(const size_t &cursorPosition, const size_t &size);

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Size object
    /// \return The size of the file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const size_t& getSize() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Cursor Position object
    /// \return The cursor position of the file
    ///
    ////////////////////////////////////////////////////////////
    const size_t& getCursorPosition() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Set the Cursor Position object
    ///
    ////////////////////////////////////////////////////////////
    void addCursorPosition(const size_t &cursorPosition);


    ////////////////////////////////////////////////////////////
    ///
    /// \brief Write the buffer to the file
    /// \param buffer The buffer to write
    /// \param size The size of the buffer
    ///
    ////////////////////////////////////////////////////////////
    void write(const std::unique_ptr<char[]> &&buffer, const size_t &size);
};

#endif //ECHFOLD_FILE_HPP
