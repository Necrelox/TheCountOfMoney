//
// Created by ruby on 23/10/22.
//

#ifndef ECHFOLD_ESPLIT_HPP
#define ECHFOLD_ESPLIT_HPP

#include "File.hpp"
#include <vector>
#include <random>

class ESplit {
private:
    std::vector<File> _blobs;
    File _originalFile;
    std::filesystem::path _workingDirectory;
    const size_t _minimumSizeBlobs;
    size_t _sizeOfBlobs{};
    unsigned int _seed{};
    unsigned short _numberBlobs{};

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Select a random buffer in a range
    /// \param gen Random generator
    /// \param range Range of the buffer
    /// \return The size of the buffer
    ///
    ////////////////////////////////////////////////////////////
    size_t _randomSelectBufferInRange(auto &gen, const std::pair<size_t, size_t> &range) const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Select a random blob
    /// \param gen random generator
    /// \param numberBlobs number of blobs
    /// \return index of the blob
    ///
    ////////////////////////////////////////////////////////////
    unsigned short _randomSelectBlob(auto &gen, size_t numberBlobs) const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Calculate the range for buffer to vampirize the original file
    /// \param sizeBlob
    /// \return std::pair<size_t, size_t>
    ///
    ////////////////////////////////////////////////////////////
    std::pair<size_t , size_t> _calculateRangeBySizeBlobForBuffer(const size_t &sizeBlob) const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Generate an uuid
    /// \return The uuid
    ///
    ////////////////////////////////////////////////////////////
    std::string _generateUUID() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Initialize the working directory
    ///
    ////////////////////////////////////////////////////////////
    void _initializeFolder();

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Initialize the seed
    /// \details The seed is generated by the random_device
    ///
    ////////////////////////////////////////////////////////////
    void _initializeSeed();

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Estimate the number of blobs
    /// \details The number of blobs is estimated by the size of the original file and the min size of blobs
    ///
    ////////////////////////////////////////////////////////////
    void _calculateNumberBlobs();

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Create the blobs in the working directory
    ///
    ////////////////////////////////////////////////////////////
    void _createBlobs();

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Split the original file in blobs
    ///
    ////////////////////////////////////////////////////////////
    void _algorithm();

public:
    ////////////////////////////////////////////////////////////
    ///
    /// \brief Construct a new ESplit object. It's for Split and Merge.
    /// \param originalFile the original file to split
    /// \param limitSizeBlobs the limit size of each blobs
    ///
    ////////////////////////////////////////////////////////////
    ESplit(const File &&originalFile, const unsigned int &limitSizeBlobs);

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Destroy the ESplit object
    ///
    ////////////////////////////////////////////////////////////
    ~ESplit() = default;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Blobs object
    /// \note The blobs are not created yet. You have to call splitFile() before.
    /// \return the blobs
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] std::vector<File> getBlobs() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Original File object
    /// \return the original file
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const File &getOriginalFile() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Working Directory object
    /// \note The working directory is not created yet. You have to call splitFile() before.
    /// \return the working directory
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] const std::filesystem::path &getWorkingDirectory() const;

    ////////////////////////////////////////////////////////////
    ///
    /// \brief Get the Seed object
    /// \note The seed is not created yet. You have to call splitFile() before.
    /// \return the seed
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] unsigned int getSeed() const;

};

#endif //ECHFOLD_ESPLIT_HPP
